// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MyCaseApi.Entities;

namespace MyCaseApi.Migrations
{
    [DbContext(typeof(ApiDbContext))]
    [Migration("20221115073454_15Nov")]
    partial class _15Nov
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.9")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new
                        {
                            Id = "a7251255-75fc-4b74-a1a2-dcff91eb1bb2",
                            ConcurrencyStamp = "7fa1a159-2c38-4205-9125-34db975e9c3b",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "f4e833a7-e496-4448-b762-90e0630a6f91",
                            ConcurrencyStamp = "f454d783-28c1-4ded-b54d-7403070c7b1f",
                            Name = "Customer",
                            NormalizedName = "CUSTOMER"
                        },
                        new
                        {
                            Id = "c0fd0c4f-1fdf-4ad0-9594-320e9dbd2b15",
                            ConcurrencyStamp = "035844f6-e408-418e-b51b-99f986f9a8e2",
                            Name = "Attorney",
                            NormalizedName = "ATTORNEY"
                        },
                        new
                        {
                            Id = "f19c181c-c43d-42a2-aa90-e06bf7ac33ba",
                            ConcurrencyStamp = "81474c2e-36b2-4cb4-8367-3633b5b10848",
                            Name = "Client",
                            NormalizedName = "CLIENT"
                        },
                        new
                        {
                            Id = "33ea1ca0-5973-4eac-a242-94ac321bb916",
                            ConcurrencyStamp = "04bc9749-050e-4a3a-8b64-684689412755",
                            Name = "Staff",
                            NormalizedName = "STAFF"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("MyCaseApi.Entities.AdminActivity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ActionDetail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("OperationName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("AdminActivity");
                });

            modelBuilder.Entity("MyCaseApi.Entities.ArchiveContact", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ContactOne")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContactTwo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("GroupId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("ArchiveContact");
                });

            modelBuilder.Entity("MyCaseApi.Entities.BillingMethod", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("BillingMethod");
                });

            modelBuilder.Entity("MyCaseApi.Entities.CaseDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("BillingContact")
                        .HasColumnType("int");

                    b.Property<int?>("BillingMethod")
                        .HasColumnType("int");

                    b.Property<string>("CaseAddedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CaseName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CaseNumber")
                        .HasColumnType("int");

                    b.Property<int?>("CaseRate")
                        .HasColumnType("int");

                    b.Property<int?>("CaseStage")
                        .HasColumnType("int");

                    b.Property<string>("ConflictCheckNotes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateAppend")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("FirmId")
                        .HasColumnType("int");

                    b.Property<string>("JobTitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LeadAttorney")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Office")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OriginatingLeadAttorney")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PracticeArea")
                        .HasColumnType("int");

                    b.Property<DateTime?>("StatueOfLimitation")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("CaseDetail");
                });

            modelBuilder.Entity("MyCaseApi.Entities.ChatGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AdminId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("GroupName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImagePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("ChatGroup");
                });

            modelBuilder.Entity("MyCaseApi.Entities.ClientTransaction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Amount")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CheckAmount")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CheckDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CheckImagePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CheckNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CheckTitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ContactId")
                        .HasColumnType("int");

                    b.Property<string>("InvoiceNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsCash")
                        .HasColumnType("bit");

                    b.Property<bool>("IsCredit")
                        .HasColumnType("bit");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ParentId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("PaymentDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("PaymentType")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ClientTransaction");
                });

            modelBuilder.Entity("MyCaseApi.Entities.Company", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Address2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CountryId")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FaxNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("FirmId")
                        .HasColumnType("int");

                    b.Property<string>("MainPhone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PrivateNotes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("State")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Website")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ZipCode")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Company");
                });

            modelBuilder.Entity("MyCaseApi.Entities.Contact", b =>
                {
                    b.Property<int>("ContactId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Address2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CellPhone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CompanyId")
                        .HasColumnType("int");

                    b.Property<int>("ContactGroupId")
                        .HasColumnType("int");

                    b.Property<int?>("CountryId")
                        .HasColumnType("int");

                    b.Property<string>("DrivingLicense")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DrivingLicenseState")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FaxNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("FirmId")
                        .HasColumnType("int");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HomePhone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsClientEnable")
                        .HasColumnType("bit");

                    b.Property<string>("JobTitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MidName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("State")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WebSite")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WorkPhone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ZipCode")
                        .HasColumnType("int");

                    b.HasKey("ContactId");

                    b.ToTable("Contact");
                });

            modelBuilder.Entity("MyCaseApi.Entities.ContactGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ContactGroupName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ContactGroup");
                });

            modelBuilder.Entity("MyCaseApi.Entities.ContactUs", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("ContactUs");
                });

            modelBuilder.Entity("MyCaseApi.Entities.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("IsoCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Country");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            IsoCode = "AFG",
                            Name = "Afghanistan"
                        },
                        new
                        {
                            Id = 2,
                            IsoCode = "ALA",
                            Name = "Aland Islands"
                        },
                        new
                        {
                            Id = 3,
                            IsoCode = "ALB",
                            Name = "Albania"
                        },
                        new
                        {
                            Id = 4,
                            IsoCode = "DZA",
                            Name = "Algeria"
                        },
                        new
                        {
                            Id = 5,
                            IsoCode = "ASM",
                            Name = "American Samoa"
                        },
                        new
                        {
                            Id = 6,
                            IsoCode = "AND",
                            Name = "Andorra"
                        },
                        new
                        {
                            Id = 7,
                            IsoCode = "AGO",
                            Name = "Angola"
                        },
                        new
                        {
                            Id = 8,
                            IsoCode = "AIA",
                            Name = "Anguilla"
                        },
                        new
                        {
                            Id = 9,
                            IsoCode = "ATA",
                            Name = "Antarctica"
                        },
                        new
                        {
                            Id = 10,
                            IsoCode = "ATG",
                            Name = "Antigua and Barbuda"
                        },
                        new
                        {
                            Id = 11,
                            IsoCode = "ARG",
                            Name = "Argentina"
                        },
                        new
                        {
                            Id = 12,
                            IsoCode = "ARM",
                            Name = "Armenia"
                        },
                        new
                        {
                            Id = 13,
                            IsoCode = "ABW",
                            Name = "Aruba"
                        },
                        new
                        {
                            Id = 14,
                            IsoCode = "AUS",
                            Name = "Australia"
                        },
                        new
                        {
                            Id = 15,
                            IsoCode = "AUT",
                            Name = "Austria"
                        },
                        new
                        {
                            Id = 16,
                            IsoCode = "AZE",
                            Name = "Azerbaijan"
                        },
                        new
                        {
                            Id = 17,
                            IsoCode = "BHS",
                            Name = "Bahamas"
                        },
                        new
                        {
                            Id = 18,
                            IsoCode = "BHR",
                            Name = "Bahrain"
                        },
                        new
                        {
                            Id = 19,
                            IsoCode = "BGD",
                            Name = "Bangladesh"
                        },
                        new
                        {
                            Id = 20,
                            IsoCode = "BRB",
                            Name = "Barbados"
                        },
                        new
                        {
                            Id = 21,
                            IsoCode = "BLR",
                            Name = "Belarus"
                        },
                        new
                        {
                            Id = 22,
                            IsoCode = "BEL",
                            Name = "Belgium"
                        },
                        new
                        {
                            Id = 23,
                            IsoCode = "BLZ",
                            Name = "Belize"
                        },
                        new
                        {
                            Id = 24,
                            IsoCode = "BEN",
                            Name = "Benin"
                        },
                        new
                        {
                            Id = 25,
                            IsoCode = "BMU",
                            Name = "Bermuda"
                        },
                        new
                        {
                            Id = 26,
                            IsoCode = "BTN",
                            Name = "Bhutan"
                        },
                        new
                        {
                            Id = 27,
                            IsoCode = "BOL",
                            Name = "Bolivia"
                        },
                        new
                        {
                            Id = 28,
                            IsoCode = "BIH",
                            Name = "Bosnia and Herzegovina"
                        },
                        new
                        {
                            Id = 29,
                            IsoCode = "BWA",
                            Name = "Botswana"
                        },
                        new
                        {
                            Id = 30,
                            IsoCode = "BVT",
                            Name = "Bouvet Island"
                        },
                        new
                        {
                            Id = 31,
                            IsoCode = "BRA",
                            Name = "Brazil"
                        },
                        new
                        {
                            Id = 32,
                            IsoCode = "VGB",
                            Name = "British Virgin Islands"
                        },
                        new
                        {
                            Id = 33,
                            IsoCode = "IOT",
                            Name = "British Indian Ocean Territory"
                        },
                        new
                        {
                            Id = 34,
                            IsoCode = "BRN",
                            Name = "Brunei Darussalam"
                        },
                        new
                        {
                            Id = 35,
                            IsoCode = "BGR",
                            Name = "Bulgaria"
                        },
                        new
                        {
                            Id = 36,
                            IsoCode = "BFA",
                            Name = "Burkina Faso"
                        },
                        new
                        {
                            Id = 37,
                            IsoCode = "BDI",
                            Name = "Burundi"
                        },
                        new
                        {
                            Id = 38,
                            IsoCode = "KHM",
                            Name = "Cambodia"
                        },
                        new
                        {
                            Id = 39,
                            IsoCode = "CMR",
                            Name = "Cameroon"
                        },
                        new
                        {
                            Id = 40,
                            IsoCode = "CAN",
                            Name = "Canada"
                        },
                        new
                        {
                            Id = 41,
                            IsoCode = "CPV",
                            Name = "Cape Verde"
                        },
                        new
                        {
                            Id = 42,
                            IsoCode = "CYM",
                            Name = "Cayman Islands"
                        },
                        new
                        {
                            Id = 43,
                            IsoCode = "CAF",
                            Name = "Central African Republic"
                        },
                        new
                        {
                            Id = 44,
                            IsoCode = "TCD",
                            Name = "Chad"
                        },
                        new
                        {
                            Id = 45,
                            IsoCode = "CHL",
                            Name = "Chile"
                        },
                        new
                        {
                            Id = 46,
                            IsoCode = "CHN",
                            Name = "China"
                        },
                        new
                        {
                            Id = 47,
                            IsoCode = "DOM",
                            Name = "Hong Kong"
                        },
                        new
                        {
                            Id = 48,
                            IsoCode = "MAC",
                            Name = "Macao"
                        },
                        new
                        {
                            Id = 49,
                            IsoCode = "CXR",
                            Name = "Christmas Island"
                        },
                        new
                        {
                            Id = 50,
                            IsoCode = "CCK",
                            Name = "Cocos (Keeling) Islands"
                        },
                        new
                        {
                            Id = 51,
                            IsoCode = "COL",
                            Name = "Colombia"
                        },
                        new
                        {
                            Id = 52,
                            IsoCode = "COM",
                            Name = "Comoros"
                        },
                        new
                        {
                            Id = 53,
                            IsoCode = "COG",
                            Name = "Congo (Brazzaville)"
                        },
                        new
                        {
                            Id = 54,
                            IsoCode = "COD",
                            Name = "Congo (Kinshasa)"
                        },
                        new
                        {
                            Id = 55,
                            IsoCode = "COK",
                            Name = "Cook Islands"
                        },
                        new
                        {
                            Id = 56,
                            IsoCode = "CRI",
                            Name = "Costa Rica"
                        },
                        new
                        {
                            Id = 57,
                            IsoCode = "CIV",
                            Name = "Cote d'Ivoire"
                        },
                        new
                        {
                            Id = 58,
                            IsoCode = "HRV",
                            Name = "Croatia"
                        },
                        new
                        {
                            Id = 59,
                            IsoCode = "CUB",
                            Name = "Cuba"
                        },
                        new
                        {
                            Id = 60,
                            IsoCode = "CYP",
                            Name = "Cyprus"
                        },
                        new
                        {
                            Id = 61,
                            IsoCode = "CZE",
                            Name = "Czech Republic"
                        },
                        new
                        {
                            Id = 62,
                            IsoCode = "DNK",
                            Name = "Denmark"
                        },
                        new
                        {
                            Id = 63,
                            IsoCode = "DJI",
                            Name = "Djibouti"
                        },
                        new
                        {
                            Id = 64,
                            IsoCode = "DMA",
                            Name = "Dominica"
                        },
                        new
                        {
                            Id = 65,
                            IsoCode = "DOM",
                            Name = "Dominican Republic"
                        },
                        new
                        {
                            Id = 66,
                            IsoCode = "ECU",
                            Name = "Ecuador"
                        },
                        new
                        {
                            Id = 67,
                            IsoCode = "EGY",
                            Name = "Egypt"
                        },
                        new
                        {
                            Id = 68,
                            IsoCode = "GNQ",
                            Name = "Equatorial Guinea"
                        },
                        new
                        {
                            Id = 69,
                            IsoCode = "ERI",
                            Name = "Eritrea"
                        },
                        new
                        {
                            Id = 70,
                            IsoCode = "EST",
                            Name = "Estonia"
                        },
                        new
                        {
                            Id = 71,
                            IsoCode = "FLK",
                            Name = "Falkland Islands"
                        },
                        new
                        {
                            Id = 72,
                            IsoCode = "FRO",
                            Name = "Faroe Islands"
                        },
                        new
                        {
                            Id = 73,
                            IsoCode = "FJI",
                            Name = "Fiji"
                        },
                        new
                        {
                            Id = 74,
                            IsoCode = "FIN",
                            Name = "Finland"
                        },
                        new
                        {
                            Id = 75,
                            IsoCode = "FRA",
                            Name = "France"
                        },
                        new
                        {
                            Id = 76,
                            IsoCode = "GUF",
                            Name = "French Guiana"
                        },
                        new
                        {
                            Id = 77,
                            IsoCode = "PYF",
                            Name = "French Polynesia"
                        },
                        new
                        {
                            Id = 78,
                            IsoCode = "ATF",
                            Name = "French Southern Territories"
                        },
                        new
                        {
                            Id = 79,
                            IsoCode = "GAB",
                            Name = "Gabon"
                        },
                        new
                        {
                            Id = 80,
                            IsoCode = "GMB",
                            Name = "Gambia"
                        },
                        new
                        {
                            Id = 81,
                            IsoCode = "GHA",
                            Name = "Georgia"
                        },
                        new
                        {
                            Id = 82,
                            IsoCode = "GAB",
                            Name = "Ghana"
                        },
                        new
                        {
                            Id = 83,
                            IsoCode = "GIB",
                            Name = "Gibraltar"
                        },
                        new
                        {
                            Id = 84,
                            IsoCode = "GRC",
                            Name = "Greece"
                        },
                        new
                        {
                            Id = 85,
                            IsoCode = "GRD",
                            Name = "Grenada"
                        },
                        new
                        {
                            Id = 86,
                            IsoCode = "GLP",
                            Name = "Guadeloupe"
                        },
                        new
                        {
                            Id = 87,
                            IsoCode = "GUM",
                            Name = "Guam"
                        },
                        new
                        {
                            Id = 88,
                            IsoCode = "GTM",
                            Name = "Guatemala"
                        },
                        new
                        {
                            Id = 89,
                            IsoCode = "GGY",
                            Name = "Guernsey"
                        },
                        new
                        {
                            Id = 90,
                            IsoCode = "GIN",
                            Name = "Guinea"
                        },
                        new
                        {
                            Id = 91,
                            IsoCode = "GNB",
                            Name = "Guinea-Bissau"
                        },
                        new
                        {
                            Id = 92,
                            IsoCode = "GUY",
                            Name = "Guyana"
                        },
                        new
                        {
                            Id = 93,
                            IsoCode = "HTI",
                            Name = "Haiti"
                        },
                        new
                        {
                            Id = 94,
                            IsoCode = "HMD",
                            Name = "Heard and Mcdonald Islands"
                        },
                        new
                        {
                            Id = 95,
                            IsoCode = "VAT",
                            Name = "Holy See (Vatican City State)"
                        },
                        new
                        {
                            Id = 96,
                            IsoCode = "HND",
                            Name = "Honduras"
                        },
                        new
                        {
                            Id = 97,
                            IsoCode = "HUN",
                            Name = "Hungary"
                        },
                        new
                        {
                            Id = 98,
                            IsoCode = "ISL",
                            Name = "Iceland"
                        },
                        new
                        {
                            Id = 99,
                            IsoCode = "IND",
                            Name = "India"
                        },
                        new
                        {
                            Id = 100,
                            IsoCode = "IDN",
                            Name = "Indonesia"
                        },
                        new
                        {
                            Id = 101,
                            IsoCode = "IRN",
                            Name = "Iran"
                        },
                        new
                        {
                            Id = 102,
                            IsoCode = "IRQ",
                            Name = "Iraq"
                        },
                        new
                        {
                            Id = 103,
                            IsoCode = "IRL",
                            Name = "Ireland"
                        },
                        new
                        {
                            Id = 104,
                            IsoCode = "IMN",
                            Name = "Isle of Man"
                        },
                        new
                        {
                            Id = 105,
                            IsoCode = "ISR",
                            Name = "Israel"
                        },
                        new
                        {
                            Id = 106,
                            IsoCode = "ITA",
                            Name = "Italy"
                        },
                        new
                        {
                            Id = 107,
                            IsoCode = "JAM",
                            Name = "Jamaica"
                        },
                        new
                        {
                            Id = 108,
                            IsoCode = "JPN",
                            Name = "Japan"
                        },
                        new
                        {
                            Id = 109,
                            IsoCode = "JEY",
                            Name = "Jersey"
                        },
                        new
                        {
                            Id = 110,
                            IsoCode = "JOR",
                            Name = "Jordan"
                        },
                        new
                        {
                            Id = 111,
                            IsoCode = "KAZ",
                            Name = "Kazakhstan"
                        },
                        new
                        {
                            Id = 112,
                            IsoCode = "KEN",
                            Name = "Kenya"
                        },
                        new
                        {
                            Id = 113,
                            IsoCode = "KIR",
                            Name = "Kiribati"
                        },
                        new
                        {
                            Id = 114,
                            IsoCode = "PRK",
                            Name = "Korea (North)"
                        },
                        new
                        {
                            Id = 115,
                            IsoCode = "KOR",
                            Name = "Korea (South)"
                        },
                        new
                        {
                            Id = 116,
                            IsoCode = "KWT",
                            Name = "Kuwait"
                        },
                        new
                        {
                            Id = 117,
                            IsoCode = "KGZ",
                            Name = "Kyrgyzstan"
                        },
                        new
                        {
                            Id = 118,
                            IsoCode = "LAO",
                            Name = "Lao PDR"
                        },
                        new
                        {
                            Id = 119,
                            IsoCode = "LVA",
                            Name = "Latvia"
                        },
                        new
                        {
                            Id = 120,
                            IsoCode = "LBN",
                            Name = "Lebanon"
                        },
                        new
                        {
                            Id = 121,
                            IsoCode = "LSO",
                            Name = "Lesotho"
                        },
                        new
                        {
                            Id = 122,
                            IsoCode = "LBR",
                            Name = "Liberia"
                        },
                        new
                        {
                            Id = 123,
                            IsoCode = "LBY",
                            Name = "Libya"
                        },
                        new
                        {
                            Id = 124,
                            IsoCode = "LIE",
                            Name = "Liechtenstein"
                        },
                        new
                        {
                            Id = 125,
                            IsoCode = "LTU",
                            Name = "Lithuania"
                        },
                        new
                        {
                            Id = 126,
                            IsoCode = "LUX",
                            Name = "Luxembourg"
                        },
                        new
                        {
                            Id = 127,
                            IsoCode = "MKD",
                            Name = "Macedonia"
                        },
                        new
                        {
                            Id = 128,
                            IsoCode = "MDG",
                            Name = "Madagascar"
                        },
                        new
                        {
                            Id = 129,
                            IsoCode = "MWI",
                            Name = "Malawi"
                        },
                        new
                        {
                            Id = 130,
                            IsoCode = "MDV",
                            Name = "Malaysia"
                        },
                        new
                        {
                            Id = 131,
                            IsoCode = "MKD",
                            Name = "Maldives"
                        },
                        new
                        {
                            Id = 132,
                            IsoCode = "MLI",
                            Name = "Mali"
                        },
                        new
                        {
                            Id = 133,
                            IsoCode = "MLT",
                            Name = "Malta"
                        },
                        new
                        {
                            Id = 134,
                            IsoCode = "MHL",
                            Name = "Marshall Islands"
                        },
                        new
                        {
                            Id = 135,
                            IsoCode = "MTQ",
                            Name = "Martinique"
                        },
                        new
                        {
                            Id = 136,
                            IsoCode = "MRT",
                            Name = "Mauritania"
                        },
                        new
                        {
                            Id = 137,
                            IsoCode = "MUS",
                            Name = "Mauritius"
                        },
                        new
                        {
                            Id = 138,
                            IsoCode = "MYT",
                            Name = "Mayotte"
                        },
                        new
                        {
                            Id = 139,
                            IsoCode = "MEX",
                            Name = "Mexico"
                        },
                        new
                        {
                            Id = 140,
                            IsoCode = "FSM",
                            Name = "Micronesia"
                        },
                        new
                        {
                            Id = 141,
                            IsoCode = "MDA",
                            Name = "Moldova"
                        },
                        new
                        {
                            Id = 142,
                            IsoCode = "MCO",
                            Name = "Monaco"
                        },
                        new
                        {
                            Id = 143,
                            IsoCode = "MNG",
                            Name = "Mongolia"
                        },
                        new
                        {
                            Id = 144,
                            IsoCode = "MNE",
                            Name = "Montenegro"
                        },
                        new
                        {
                            Id = 145,
                            IsoCode = "MSR",
                            Name = "Montserrat"
                        },
                        new
                        {
                            Id = 146,
                            IsoCode = "MAR",
                            Name = "Morocco"
                        },
                        new
                        {
                            Id = 147,
                            IsoCode = "MOZ",
                            Name = "Mozambique"
                        },
                        new
                        {
                            Id = 148,
                            IsoCode = "MMR",
                            Name = "Myanmar"
                        },
                        new
                        {
                            Id = 149,
                            IsoCode = "NAM",
                            Name = "Namibia"
                        },
                        new
                        {
                            Id = 150,
                            IsoCode = "NRU",
                            Name = "Nauru"
                        },
                        new
                        {
                            Id = 151,
                            IsoCode = "NPL",
                            Name = "Nepal"
                        },
                        new
                        {
                            Id = 152,
                            IsoCode = "NLD",
                            Name = "Netherlands"
                        },
                        new
                        {
                            Id = 153,
                            IsoCode = "ANT",
                            Name = "Netherlands Antilles"
                        },
                        new
                        {
                            Id = 154,
                            IsoCode = "NCL",
                            Name = "New Caledonia"
                        },
                        new
                        {
                            Id = 155,
                            IsoCode = "NZL",
                            Name = "New Zealand"
                        },
                        new
                        {
                            Id = 156,
                            IsoCode = "NIC",
                            Name = "Nicaragua"
                        },
                        new
                        {
                            Id = 157,
                            IsoCode = "NER",
                            Name = "Niger"
                        },
                        new
                        {
                            Id = 158,
                            IsoCode = "NIU",
                            Name = "Niue"
                        },
                        new
                        {
                            Id = 159,
                            IsoCode = "NFK",
                            Name = "Norfolk Island"
                        },
                        new
                        {
                            Id = 160,
                            IsoCode = "MNP",
                            Name = "Northern Mariana Islands"
                        },
                        new
                        {
                            Id = 161,
                            IsoCode = "NOR",
                            Name = "Norway"
                        },
                        new
                        {
                            Id = 162,
                            IsoCode = "OMN",
                            Name = "Oman"
                        },
                        new
                        {
                            Id = 163,
                            IsoCode = "PAK",
                            Name = "Pakistan"
                        },
                        new
                        {
                            Id = 164,
                            IsoCode = "PLW",
                            Name = "Palau"
                        },
                        new
                        {
                            Id = 165,
                            IsoCode = "PSE",
                            Name = "Palestinian Territory"
                        },
                        new
                        {
                            Id = 166,
                            IsoCode = "PAN",
                            Name = "Panama"
                        },
                        new
                        {
                            Id = 167,
                            IsoCode = "PNG",
                            Name = "Papua New Guinea"
                        },
                        new
                        {
                            Id = 168,
                            IsoCode = "PRY",
                            Name = "Paraguay"
                        },
                        new
                        {
                            Id = 169,
                            IsoCode = "PER",
                            Name = "Peru"
                        },
                        new
                        {
                            Id = 170,
                            IsoCode = "PHL",
                            Name = "Philippines"
                        },
                        new
                        {
                            Id = 171,
                            IsoCode = "PCN",
                            Name = "Pitcairn"
                        },
                        new
                        {
                            Id = 172,
                            IsoCode = "POL",
                            Name = "Poland"
                        },
                        new
                        {
                            Id = 173,
                            IsoCode = "PRT",
                            Name = "Portugal"
                        },
                        new
                        {
                            Id = 174,
                            IsoCode = "PRI",
                            Name = "Puerto Rico"
                        },
                        new
                        {
                            Id = 175,
                            IsoCode = "QAT",
                            Name = "Qatar"
                        },
                        new
                        {
                            Id = 176,
                            IsoCode = "REU",
                            Name = "Reunion"
                        },
                        new
                        {
                            Id = 177,
                            IsoCode = "ROU",
                            Name = "Romania"
                        },
                        new
                        {
                            Id = 178,
                            IsoCode = "RUS",
                            Name = "Russian Federation"
                        },
                        new
                        {
                            Id = 179,
                            IsoCode = "RWA",
                            Name = "Rwanda"
                        },
                        new
                        {
                            Id = 180,
                            IsoCode = "BLM",
                            Name = "Saint-Barthelemy"
                        },
                        new
                        {
                            Id = 181,
                            IsoCode = "SHN",
                            Name = "Saint Helena"
                        },
                        new
                        {
                            Id = 182,
                            IsoCode = "KNA",
                            Name = "Saint Kitts and Nevis"
                        },
                        new
                        {
                            Id = 183,
                            IsoCode = "LCA",
                            Name = "Saint Lucia"
                        },
                        new
                        {
                            Id = 184,
                            IsoCode = "MAF",
                            Name = "Saint-Martin"
                        },
                        new
                        {
                            Id = 185,
                            IsoCode = "SPM",
                            Name = "Saint Pierre and Miquelon"
                        },
                        new
                        {
                            Id = 186,
                            IsoCode = "VCT",
                            Name = "Saint Vincent and Grenadines"
                        },
                        new
                        {
                            Id = 187,
                            IsoCode = "WSM",
                            Name = "Samoa"
                        },
                        new
                        {
                            Id = 188,
                            IsoCode = "SMR",
                            Name = "San Marino"
                        },
                        new
                        {
                            Id = 189,
                            IsoCode = "STP",
                            Name = "Sao Tome and Principe"
                        },
                        new
                        {
                            Id = 190,
                            IsoCode = "SAU",
                            Name = "Saudi Arabia"
                        },
                        new
                        {
                            Id = 191,
                            IsoCode = "SEN",
                            Name = "Senegal"
                        },
                        new
                        {
                            Id = 192,
                            IsoCode = "SRB",
                            Name = "Serbia"
                        },
                        new
                        {
                            Id = 193,
                            IsoCode = "SYC",
                            Name = "Seychelles"
                        },
                        new
                        {
                            Id = 194,
                            IsoCode = "SLE",
                            Name = "Sierra Leone"
                        },
                        new
                        {
                            Id = 195,
                            IsoCode = "SGP",
                            Name = "Singapore"
                        },
                        new
                        {
                            Id = 196,
                            IsoCode = "SVK",
                            Name = "Slovakia"
                        },
                        new
                        {
                            Id = 197,
                            IsoCode = "SVN",
                            Name = "Slovenia"
                        },
                        new
                        {
                            Id = 198,
                            IsoCode = "SLB",
                            Name = "Solomon Islands"
                        },
                        new
                        {
                            Id = 199,
                            IsoCode = "SOM",
                            Name = "Somalia"
                        },
                        new
                        {
                            Id = 200,
                            IsoCode = "ZAF",
                            Name = "South Africa"
                        },
                        new
                        {
                            Id = 201,
                            IsoCode = "SGS",
                            Name = "South Georgia"
                        },
                        new
                        {
                            Id = 202,
                            IsoCode = "ESP",
                            Name = "South Sudan"
                        },
                        new
                        {
                            Id = 203,
                            IsoCode = "SVN",
                            Name = "Spain"
                        },
                        new
                        {
                            Id = 204,
                            IsoCode = "LKA",
                            Name = "Sri Lanka"
                        },
                        new
                        {
                            Id = 205,
                            IsoCode = "SDN",
                            Name = "Sudan"
                        },
                        new
                        {
                            Id = 206,
                            IsoCode = "SUR",
                            Name = "Suriname"
                        },
                        new
                        {
                            Id = 207,
                            IsoCode = "SJM",
                            Name = "Svalbard and Jan Mayen Islands"
                        },
                        new
                        {
                            Id = 208,
                            IsoCode = "SWZ",
                            Name = "Swaziland"
                        },
                        new
                        {
                            Id = 209,
                            IsoCode = "SWE",
                            Name = "Sweden"
                        },
                        new
                        {
                            Id = 210,
                            IsoCode = "CHE",
                            Name = "Switzerland"
                        },
                        new
                        {
                            Id = 211,
                            IsoCode = "SYR",
                            Name = "Syria"
                        },
                        new
                        {
                            Id = 212,
                            IsoCode = "TWN",
                            Name = "Taiwan"
                        },
                        new
                        {
                            Id = 213,
                            IsoCode = "TJK",
                            Name = "Tajikistan"
                        },
                        new
                        {
                            Id = 214,
                            IsoCode = "TZA",
                            Name = "Tanzania"
                        },
                        new
                        {
                            Id = 215,
                            IsoCode = "THA",
                            Name = "Thailand"
                        },
                        new
                        {
                            Id = 216,
                            IsoCode = "TLS",
                            Name = "Timor-Leste"
                        },
                        new
                        {
                            Id = 217,
                            IsoCode = "TGO",
                            Name = "Togo"
                        },
                        new
                        {
                            Id = 218,
                            IsoCode = "TKL",
                            Name = "Tokelau"
                        },
                        new
                        {
                            Id = 219,
                            IsoCode = "TON",
                            Name = "Tonga"
                        },
                        new
                        {
                            Id = 220,
                            IsoCode = "TTO",
                            Name = "Trinidad and Tobago"
                        },
                        new
                        {
                            Id = 221,
                            IsoCode = "TUN",
                            Name = "Tunisia"
                        },
                        new
                        {
                            Id = 222,
                            IsoCode = "TUR",
                            Name = "Turkey"
                        },
                        new
                        {
                            Id = 223,
                            IsoCode = "TKM",
                            Name = "Turkmenistan"
                        },
                        new
                        {
                            Id = 224,
                            IsoCode = "TCA",
                            Name = "Turks and Caicos Islands"
                        },
                        new
                        {
                            Id = 225,
                            IsoCode = "TUV",
                            Name = "Tuvalu"
                        },
                        new
                        {
                            Id = 226,
                            IsoCode = "UGA",
                            Name = "Uganda"
                        },
                        new
                        {
                            Id = 227,
                            IsoCode = "UKR",
                            Name = "Ukraine"
                        },
                        new
                        {
                            Id = 228,
                            IsoCode = "ARE",
                            Name = "United Arab Emirates"
                        },
                        new
                        {
                            Id = 229,
                            IsoCode = "GBR",
                            Name = "United Kingdom"
                        },
                        new
                        {
                            Id = 230,
                            IsoCode = "USA",
                            Name = "United States of America"
                        },
                        new
                        {
                            Id = 231,
                            IsoCode = "UMI",
                            Name = "US Minor Outlying Islands"
                        },
                        new
                        {
                            Id = 232,
                            IsoCode = "URY",
                            Name = "Uruguay"
                        },
                        new
                        {
                            Id = 233,
                            IsoCode = "UZB",
                            Name = "Uzbekistan"
                        },
                        new
                        {
                            Id = 234,
                            IsoCode = "VUT",
                            Name = "Vanuatu"
                        },
                        new
                        {
                            Id = 235,
                            IsoCode = "VEN",
                            Name = "Venezuela"
                        },
                        new
                        {
                            Id = 236,
                            IsoCode = "VNM",
                            Name = "Viet Nam"
                        },
                        new
                        {
                            Id = 237,
                            IsoCode = "VIR",
                            Name = "Virgin Islands"
                        },
                        new
                        {
                            Id = 238,
                            IsoCode = "WLF",
                            Name = "Wallis and Futuna Islands"
                        },
                        new
                        {
                            Id = 239,
                            IsoCode = "ESH",
                            Name = "Western Sahara"
                        },
                        new
                        {
                            Id = 240,
                            IsoCode = "YEM",
                            Name = "Yemen"
                        },
                        new
                        {
                            Id = 241,
                            IsoCode = "ZMB",
                            Name = "Zambia"
                        },
                        new
                        {
                            Id = 242,
                            IsoCode = "ZWE",
                            Name = "Zimbabwe"
                        });
                });

            modelBuilder.Entity("MyCaseApi.Entities.Decuments", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CaseId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CaseName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CaseNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DecumentDescripation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DecumentPath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DecumentTags")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DecumentTittle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DecumentType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("FirmId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserType")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Decuments");
                });

            modelBuilder.Entity("MyCaseApi.Entities.DocumentTag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("DocumentTagName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("FirmId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("DocumentTag");
                });

            modelBuilder.Entity("MyCaseApi.Entities.Events", b =>
                {
                    b.Property<int>("EventId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool?>("AllDay")
                        .HasColumnType("bit");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("End")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("Start")
                        .HasColumnType("datetime2");

                    b.Property<string>("ThemeColor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("EventId");

                    b.ToTable("Events");
                });

            modelBuilder.Entity("MyCaseApi.Entities.Expense", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Amount")
                        .HasColumnType("int");

                    b.Property<int>("CaseId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CheckDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CheckImagePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CheckNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CheckTitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClientId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ExpenseType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("FirmId")
                        .HasColumnType("int");

                    b.Property<string>("InvoiceNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsCash")
                        .HasColumnType("bit");

                    b.Property<bool>("IsCredit")
                        .HasColumnType("bit");

                    b.Property<string>("PaymentMode")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Expenses");
                });

            modelBuilder.Entity("MyCaseApi.Entities.Faq", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Answer")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Question")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Faq");
                });

            modelBuilder.Entity("MyCaseApi.Entities.FinancialDetails", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AccountNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ParentId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("FinancialDetails");
                });

            modelBuilder.Entity("MyCaseApi.Entities.Firm", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("FirmEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirmName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirmNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirmWebsite")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NumberofEmployees")
                        .HasColumnType("int");

                    b.Property<string>("OwnerName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RegistrationNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Firm");
                });

            modelBuilder.Entity("MyCaseApi.Entities.FirmOffice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("FirmId")
                        .HasColumnType("int");

                    b.Property<bool>("IsPrimary")
                        .HasColumnType("bit");

                    b.Property<string>("OfficeName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("FirmOffice");
                });

            modelBuilder.Entity("MyCaseApi.Entities.FirmOfficeAddress", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Country")
                        .HasColumnType("int");

                    b.Property<int>("FirmOfficeId")
                        .HasColumnType("int");

                    b.Property<string>("State")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ZipCode")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("FirmOfficeAddress");
                });

            modelBuilder.Entity("MyCaseApi.Entities.GroupMessage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("GroupId")
                        .HasColumnType("int");

                    b.Property<int>("MessageId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("GroupMessage");
                });

            modelBuilder.Entity("MyCaseApi.Entities.GroupUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("GroupId")
                        .HasColumnType("int");

                    b.Property<bool>("IsArchive")
                        .HasColumnType("bit");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("GroupUser");
                });

            modelBuilder.Entity("MyCaseApi.Entities.Lead", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Address2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AssignTo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CellPhone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CompanyId")
                        .HasColumnType("int");

                    b.Property<bool>("ConflictCheck")
                        .HasColumnType("bit");

                    b.Property<string>("ConflictCheckNotes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ContactId")
                        .HasColumnType("int");

                    b.Property<int?>("Country")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DOB")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateAdded")
                        .HasColumnType("datetime2");

                    b.Property<string>("DriverLicence")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DriverLicenceState")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("FirmId")
                        .HasColumnType("int");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HomePhone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LeadDetails")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MidName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Office")
                        .HasColumnType("int");

                    b.Property<string>("PotentailCaseDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PotentialValueCase")
                        .HasColumnType("int");

                    b.Property<int?>("PracticeAreaId")
                        .HasColumnType("int");

                    b.Property<int?>("RefferelSource")
                        .HasColumnType("int");

                    b.Property<string>("State")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("WorkPhone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ZipCode")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Lead");
                });

            modelBuilder.Entity("MyCaseApi.Entities.Message", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ImagePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsGroupMessage")
                        .HasColumnType("bit");

                    b.Property<bool>("IsRead")
                        .HasColumnType("bit");

                    b.Property<string>("MessageText")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ReceiverId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SenderId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("Message");
                });

            modelBuilder.Entity("MyCaseApi.Entities.News", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ExpireDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("FirmId")
                        .HasColumnType("int");

                    b.Property<string>("NewsDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NewsTittle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NewsType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("PublishDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("SendTo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Time")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("status")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("News");
                });

            modelBuilder.Entity("MyCaseApi.Entities.Notes", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CaseId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("FirmId")
                        .HasColumnType("int");

                    b.Property<string>("NotesDescripation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NotesTag")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NotesTittle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NotesType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Notes");
                });

            modelBuilder.Entity("MyCaseApi.Entities.NotesTag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("FirmId")
                        .HasColumnType("int");

                    b.Property<string>("NotesTagName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("NotesTag");
                });

            modelBuilder.Entity("MyCaseApi.Entities.PackageService", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool?>("IsSeleced")
                        .HasColumnType("bit");

                    b.Property<int?>("PricePlanId")
                        .HasColumnType("int");

                    b.Property<int?>("ServiceId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("packageService");
                });

            modelBuilder.Entity("MyCaseApi.Entities.PaymentInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FromScreen")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InvoiceNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("PaymentDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("PaymentType")
                        .HasColumnType("int");

                    b.Property<string>("PlanName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Price")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SubsciptionId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Payment");
                });

            modelBuilder.Entity("MyCaseApi.Entities.PaymentTypes", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("PaymentTypes");
                });

            modelBuilder.Entity("MyCaseApi.Entities.PracticeArea", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("PracticeAreaName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("PracticeArea");
                });

            modelBuilder.Entity("MyCaseApi.Entities.PricePlan", b =>
                {
                    b.Property<int>("PlanID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PlanName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PriceRange")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("Status")
                        .HasColumnType("bit");

                    b.Property<string>("TimeRange")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PlanID");

                    b.ToTable("PricePlan");
                });

            modelBuilder.Entity("MyCaseApi.Entities.RefferalSource", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("RefferalSourceName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("RefferalSource");
                });

            modelBuilder.Entity("MyCaseApi.Entities.RequestUsers", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImagePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PlanID")
                        .HasColumnType("int");

                    b.Property<string>("PostCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("State")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("Status")
                        .HasColumnType("bit");

                    b.Property<int>("VerificationStatus")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("RequestUsers");
                });

            modelBuilder.Entity("MyCaseApi.Entities.Service", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Service");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Unlimited Messages"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Timeline"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Calendar Events"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Reporting"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Documents Handling"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Notes Handling"
                        });
                });

            modelBuilder.Entity("MyCaseApi.Entities.States", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("States");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Code = "AK",
                            Name = "Alaska"
                        },
                        new
                        {
                            Id = 2,
                            Code = "AL",
                            Name = "Alabama"
                        },
                        new
                        {
                            Id = 3,
                            Code = "AR",
                            Name = "Arkansas"
                        },
                        new
                        {
                            Id = 4,
                            Code = "AZ",
                            Name = "Arizona"
                        },
                        new
                        {
                            Id = 5,
                            Code = "CO",
                            Name = "California"
                        },
                        new
                        {
                            Id = 6,
                            Code = "CA",
                            Name = "Colorado"
                        },
                        new
                        {
                            Id = 7,
                            Code = "CT",
                            Name = "Connecticut"
                        },
                        new
                        {
                            Id = 8,
                            Code = "DC",
                            Name = "Washington, D.C."
                        },
                        new
                        {
                            Id = 9,
                            Code = "DE",
                            Name = "Delaware"
                        },
                        new
                        {
                            Id = 10,
                            Code = "FL",
                            Name = "Florida"
                        },
                        new
                        {
                            Id = 11,
                            Code = "GA",
                            Name = "Georgia"
                        },
                        new
                        {
                            Id = 12,
                            Code = "HI",
                            Name = "Hawaii"
                        },
                        new
                        {
                            Id = 13,
                            Code = "IA",
                            Name = "Iowa"
                        },
                        new
                        {
                            Id = 14,
                            Code = "ID",
                            Name = "Idaho"
                        },
                        new
                        {
                            Id = 15,
                            Code = "IL",
                            Name = "Illinois"
                        },
                        new
                        {
                            Id = 16,
                            Code = "IN",
                            Name = "Indiana"
                        },
                        new
                        {
                            Id = 17,
                            Code = "KS",
                            Name = "Kansas"
                        },
                        new
                        {
                            Id = 18,
                            Code = "KY",
                            Name = "Kentucky"
                        },
                        new
                        {
                            Id = 19,
                            Code = "LA",
                            Name = "Louisiana"
                        },
                        new
                        {
                            Id = 20,
                            Code = "MA",
                            Name = "Massachusetts"
                        },
                        new
                        {
                            Id = 21,
                            Code = "MD",
                            Name = "Maryland"
                        },
                        new
                        {
                            Id = 22,
                            Code = "ME",
                            Name = "Maine"
                        },
                        new
                        {
                            Id = 23,
                            Code = "MI",
                            Name = "Michigan"
                        },
                        new
                        {
                            Id = 24,
                            Code = "MN",
                            Name = "Minnesota"
                        },
                        new
                        {
                            Id = 25,
                            Code = "MO",
                            Name = "Missouri"
                        },
                        new
                        {
                            Id = 26,
                            Code = "MS",
                            Name = "Mississippi"
                        },
                        new
                        {
                            Id = 27,
                            Code = "MT",
                            Name = "Montana"
                        },
                        new
                        {
                            Id = 28,
                            Code = "NC",
                            Name = "North Carolina"
                        },
                        new
                        {
                            Id = 29,
                            Code = "ND",
                            Name = "North Dakota"
                        },
                        new
                        {
                            Id = 30,
                            Code = "NE",
                            Name = "Nebraska"
                        },
                        new
                        {
                            Id = 31,
                            Code = "NH",
                            Name = "New Hampshire"
                        },
                        new
                        {
                            Id = 32,
                            Code = "NJ",
                            Name = "New Jersey"
                        },
                        new
                        {
                            Id = 33,
                            Code = "NM",
                            Name = "New Mexico"
                        },
                        new
                        {
                            Id = 34,
                            Code = "AV",
                            Name = "Nevada"
                        },
                        new
                        {
                            Id = 35,
                            Code = "AY",
                            Name = "New York"
                        },
                        new
                        {
                            Id = 36,
                            Code = "OH",
                            Name = "Ohio"
                        },
                        new
                        {
                            Id = 37,
                            Code = "OK",
                            Name = "Oklahoma"
                        },
                        new
                        {
                            Id = 38,
                            Code = "OR",
                            Name = "Oregon"
                        },
                        new
                        {
                            Id = 39,
                            Code = "PA",
                            Name = "Pennsylvania"
                        },
                        new
                        {
                            Id = 40,
                            Code = "RI",
                            Name = "Rhode Island"
                        },
                        new
                        {
                            Id = 41,
                            Code = "SC",
                            Name = "South Carolina"
                        },
                        new
                        {
                            Id = 42,
                            Code = "SD",
                            Name = "South Dakota"
                        },
                        new
                        {
                            Id = 43,
                            Code = "TN",
                            Name = "Tennessee"
                        },
                        new
                        {
                            Id = 44,
                            Code = "TX",
                            Name = "Texas"
                        },
                        new
                        {
                            Id = 45,
                            Code = "UT",
                            Name = "Utah"
                        },
                        new
                        {
                            Id = 46,
                            Code = "VA",
                            Name = "Virginia"
                        },
                        new
                        {
                            Id = 47,
                            Code = "VT",
                            Name = "Vermont"
                        },
                        new
                        {
                            Id = 48,
                            Code = "WA",
                            Name = "Washington"
                        },
                        new
                        {
                            Id = 49,
                            Code = "WI",
                            Name = "Wisconsin"
                        },
                        new
                        {
                            Id = 50,
                            Code = "WV",
                            Name = "West Virginia"
                        },
                        new
                        {
                            Id = 51,
                            Code = "WY",
                            Name = "Wyoming"
                        },
                        new
                        {
                            Id = 52,
                            Code = "AA",
                            Name = "U.S. Armed Forces Americas"
                        },
                        new
                        {
                            Id = 53,
                            Code = "AE",
                            Name = "U.S. Armed Forces Europe"
                        },
                        new
                        {
                            Id = 54,
                            Code = "AP",
                            Name = "U.S. Armed Forces Pacific"
                        },
                        new
                        {
                            Id = 55,
                            Code = "AS",
                            Name = "American Samoa"
                        },
                        new
                        {
                            Id = 56,
                            Code = "FM",
                            Name = "Micronesia"
                        },
                        new
                        {
                            Id = 57,
                            Code = "GU",
                            Name = "Guam"
                        },
                        new
                        {
                            Id = 58,
                            Code = "MH",
                            Name = "Marshall Islands"
                        },
                        new
                        {
                            Id = 59,
                            Code = "MP",
                            Name = "Northern Mariana Islands"
                        },
                        new
                        {
                            Id = 60,
                            Code = "PR",
                            Name = "Puerto Rico"
                        },
                        new
                        {
                            Id = 61,
                            Code = "VI",
                            Name = "Virgin Islands"
                        });
                });

            modelBuilder.Entity("MyCaseApi.Entities.Tasks", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CaseId")
                        .HasColumnType("int");

                    b.Property<string>("ClientId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DueDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("FirmId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Priority")
                        .HasColumnType("int");

                    b.Property<string>("StaffId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Tasks");
                });

            modelBuilder.Entity("MyCaseApi.Entities.TimeLine", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CaseId")
                        .HasColumnType("int");

                    b.Property<int?>("ClientId")
                        .HasColumnType("int");

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DocFilePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DueDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FilePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("FilePathbyte")
                        .HasColumnType("varbinary(max)");

                    b.Property<int?>("FirmId")
                        .HasColumnType("int");

                    b.Property<string>("HostLink")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsReminder")
                        .HasColumnType("bit");

                    b.Property<string>("JoinLink")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("MeetingTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("TimeLineType")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VideoFilePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("VideoFilePathbyte")
                        .HasColumnType("varbinary(max)");

                    b.HasKey("Id");

                    b.ToTable("TimeLine");
                });

            modelBuilder.Entity("MyCaseApi.Entities.Transaction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AccountName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AccountNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AccountType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Amount")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClosingBalance")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("DetailAccountId")
                        .HasColumnType("int");

                    b.Property<string>("InvoiceNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("transactionType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Transaction");
                });

            modelBuilder.Entity("MyCaseApi.Entities.UserAgainstCase", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BillingType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CaseId")
                        .HasColumnType("int");

                    b.Property<string>("Rate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("UserAgainstCase");
                });

            modelBuilder.Entity("MyCaseApi.Entities.UserGroupMessage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("GroupId")
                        .HasColumnType("int");

                    b.Property<bool>("IsRead")
                        .HasColumnType("bit");

                    b.Property<int>("MessageId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("UserGroupMessage");
                });

            modelBuilder.Entity("MyCaseApi.Entities.UserSubcription", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Amount")
                        .HasColumnType("nvarchar(max)");

                    b.Property<TimeSpan>("CreationTime")
                        .HasColumnType("time");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("PaymentStatus")
                        .HasColumnType("int");

                    b.Property<int>("Paymenttype")
                        .HasColumnType("int");

                    b.Property<int>("Period")
                        .HasColumnType("int");

                    b.Property<int>("PricePlanId")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("UserSubcription");
                });

            modelBuilder.Entity("MyCaseApi.Entities.UserTitle", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("UserTitleName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("UserTitle");
                });

            modelBuilder.Entity("MyCaseApi.Entities.UserVerification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("AdminApproval")
                        .HasColumnType("bit");

                    b.Property<bool>("AutoApproval")
                        .HasColumnType("bit");

                    b.Property<string>("ImagePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PaymentId")
                        .HasColumnType("int");

                    b.Property<int>("PaymentType")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("UserVerification");
                });

            modelBuilder.Entity("MyCaseApi.Entities.User", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CaseRate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImagePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ParentId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PostCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("State")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<int?>("UserTitleId")
                        .HasColumnType("int");

                    b.Property<int>("VerificationStatus")
                        .HasColumnType("int");

                    b.HasDiscriminator().HasValue("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
